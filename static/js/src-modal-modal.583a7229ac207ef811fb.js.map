{"version":3,"sources":["/home/runner/work/galaco/galaco/packages/galaco/src/modal/Demo.tsx","/home/runner/work/galaco/galaco/packages/galaco/src/modal/Modal.mdx"],"names":["CardWrapper","styled","Box","_templateObject","Demo","state","modal1","react_default","a","createElement","src","modal","Fragment","onClick","show","Object","assign","maskClosable","hide","Component","defaultProps","layoutProps","MDXLayout","MDXContent","_ref","components","props","objectWithoutProperties","index_es","mdxType","id","index_esm","of","Modal","__position","__code","__scope","this","Props","Playground","css","keyframes","modal_Demo","parentName","className","metastring","jsx","isMDXComponent"],"mappings":"4zCAUA,IAAMA,EAAcC,YAAOC,IAAPD,CAAHE,KAWXC,E,2MACFC,W,IAEAC,OAAS,K,wEAEL,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACK,SAAAC,GAAK,OACFJ,EAAAC,EAAAC,cAACF,EAAAC,EAAMI,SAAP,KACIL,EAAAC,EAAAC,cAAA,UAAQI,QAASF,EAAMG,MAAvB,QACAP,EAAAC,EAAAC,cAACC,EAAA,EAADK,OAAAC,OAAA,GAAWL,EAAX,CAAkBM,cAAY,IAC1BV,EAAAC,EAAAC,cAACT,EAAD,KACIO,EAAAC,EAAAC,cAAA,UAAQI,QAASF,EAAMO,MAAvB,kB,GAZbC,aAAbf,EAEKgB,aAAe,GAmBXhB,Q,qRCjCf,IAKMiB,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGX,IAFFC,EAECD,EAFDC,WACGC,EACFX,OAAAY,EAAA,EAAAZ,CAAAS,EAAA,gBACD,OAAOT,OAAAa,EAAA,EAAAb,CAACO,EAADP,OAAAC,OAAA,GAAeK,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYI,QAAQ,cAE5Ed,OAAAa,EAAA,EAAAb,CAAA,KAAQ,CACNe,GAAM,SADR,SAGAf,OAAAa,EAAA,EAAAb,CAACgB,EAAA,EAAD,CAAOC,GAAIC,IAAOJ,QAAQ,UAC1Bd,OAAAa,EAAA,EAAAb,CAAA,KAAQ,CACNe,GAAM,QADR,QAGAf,OAAAa,EAAA,EAAAb,CAACgB,EAAA,EAAD,CAAYG,WAAY,EAAGC,OAAQ,WAAYC,QAAS,CACtDV,MAAOW,KAAOA,KAAKX,MAAQA,EAC3BO,UACA7B,OACAkC,UACAC,eACAtC,WACAuC,QACAC,eACCZ,QAAQ,cAAcd,OAAAa,EAAA,EAAAb,CAAC2B,EAAD,CAAMb,QAAQ,UACvCd,OAAAa,EAAA,EAAAb,CAAA,KAAQ,CACNe,GAAM,QADR,QAGAf,OAAAa,EAAA,EAAAb,CAAA,2EAA8BA,OAAAa,EAAA,EAAAb,CAAA,cAAY4B,WAAW,KAAvB,gBAA9B,qIACA5B,OAAAa,EAAA,EAAAb,CAAA,oMACAA,OAAAa,EAAA,EAAAb,CAAA,KAAQ,CACNe,GAAM,4BADR,4BAGAf,OAAAa,EAAA,EAAAb,CAAA,WAAKA,OAAAa,EAAA,EAAAb,CAAA,OAAAA,OAAAC,OAAA,CAAM2B,WAAW,OAAU,CAC5BC,UAAa,iBADZ,mkCAwCL7B,OAAAa,EAAA,EAAAb,CAAA,KAAQ,CACNe,GAAM,4BADR,4BAGAf,OAAAa,EAAA,EAAAb,CAAA,6HAAmCA,OAAAa,EAAA,EAAAb,CAAA,cAAY4B,WAAW,KAAvB,2CACnC5B,OAAAa,EAAA,EAAAb,CAAA,WAAKA,OAAAa,EAAA,EAAAb,CAAA,OAAAA,OAAAC,OAAA,CAAM2B,WAAW,OAAU,CAC5BC,UAAa,sBACbC,WAAc,MACdC,KAAO,IAHN,oxC,yKAsDTvB,EAAWwB,gBAAiB","file":"static/js/src-modal-modal.c6c93392.js","sourcesContent":["/**\n * @file [Demo]\n * @author [mzvast]\n * @email [mzvast@gmail.com]\n * @create date 2019-02-26 13:51:45\n */\n/* eslint-disable max-len,babel/new-cap,operator-linebreak,fecs-export-on-declare,space-before-function-paren */\nimport React, {Component} from 'react';\nimport {styled, css, WithModal, Box, Modal, palette} from '../index';\n\nconst CardWrapper = styled(Box)`\n    width: 400px;\n    height: 200px;\n    box-shadow: 0 5px 20px 0 rgba(25, 46, 99, 0.1),\n        0 10px 40px 0 rgba(52, 65, 126, 0.1);\n    border-radius: 20px;\n    border: solid red 1px;\n    background-color: pink;\n`;\ninterface Props {}\ninterface State {}\nclass Demo extends Component<Props, State> {\n    state: State;\n    static defaultProps = {};\n    modal1 = null;\n    render() {\n        return (\n            <WithModal>\n                {modal => (\n                    <React.Fragment>\n                        <button onClick={modal.show}>show</button>\n                        <Modal {...modal} maskClosable>\n                            <CardWrapper>\n                                <button onClick={modal.hide}>close</button>\n                            </CardWrapper>\n                        </Modal>\n                    </React.Fragment>\n                )}\n            </WithModal>\n        );\n    }\n}\nexport default Demo;\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport Modal from './Modal';\nimport Demo from './Demo';\nimport {Props, Playground} from 'docz';\nimport {styled, css, keyframes} from '../index';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"modal\"\n    }}>{`Modal`}</h1>\n    <Props of={Modal} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"demo\"\n    }}>{`Demo`}</h2>\n    <Playground __position={1} __code={'<Demo />'} __scope={{\n      props: this ? this.props : props,\n      Modal,\n      Demo,\n      Props,\n      Playground,\n      styled,\n      css,\n      keyframes\n    }} mdxType=\"Playground\">{<Demo mdxType=\"Demo\" />}</Playground>\n    <h2 {...{\n      \"id\": \"code\"\n    }}>{`Code`}</h2>\n    <p>{`以render props作为API设计思路。`}<inlineCode parentName=\"p\">{`<WithModal/>`}</inlineCode>{`返回modal对象，提供了show,hide,toggle三种方法和多种状态。`}</p>\n    <p>{`由于采用了React Portal，Modal能够获得组件所在的上下文。并只在show的时候render。`}</p>\n    <h2 {...{\n      \"id\": \"正常调用\"\n    }}>{`正常调用`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import React, {Component} from 'react';\nimport {styled, css, WithModal, Box, Modal, palette} from 'galaco';\n\nconst CardWrapper = styled(Box)\\`\n    width: 400px;\n    height: 200px;\n    box-shadow: 0 5px 20px 0 rgba(25, 46, 99, 0.1),\n        0 10px 40px 0 rgba(52, 65, 126, 0.1);\n    border-radius: 20px;\n    border: solid red 1px;\n    background-color: pink;\n\\`;\ntype Props = {};\ntype State = {};\nclass Demo extends Component<Props, State> {\n    state: State;\n    static defaultProps = {};\n\n    render() {\n        return (\n            <WithModal>\n                {modal => (\n                    <React.Fragment>\n                        <button onClick={modal.show}>show</button>\n                        <Modal {...modal} maskClosable>\n                            <CardWrapper>\n                                <button onClick={modal.hide}>close</button>\n                            </CardWrapper>\n                        </Modal>\n                    </React.Fragment>\n                )}\n            </WithModal>\n        );\n    }\n}\nexport default Demo;\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"外部调用\"\n    }}>{`外部调用`}</h2>\n    <p>{`如在render函数中保存modal实例，可供外部调用。`}<inlineCode parentName=\"p\">{`{((this.modalInstance = modal), null)}`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"metastring\": \"jsx\",\n        \"jsx\": true\n      }}>{`import React, {Component} from 'react';\nimport {styled, css, WithModal, Box, Modal, palette} from 'galaco';\n\nconst CardWrapper = styled(Box)\\`\n    position: absolute;\n    width: 400px;\n    height: 200px;\n    box-shadow: 0 5px 20px 0 rgba(25, 46, 99, 0.1),\n        0 10px 40px 0 rgba(52, 65, 126, 0.1);\n    border-radius: 20px;\n    padding: 10px;\n\\`;\ntype Props = {};\ntype State = {};\nclass Demo extends Component<Props, State> {\n    state: State;\n    static defaultProps = {};\n    modal1 = null;\n    render() {\n        return (\n            <WithModal>\n                {modal => (\n                    <React.Fragment>\n                        {((this.modal1 = modal), null)}\n                        <button onClick={modal.show}>show</button>\n                        <Modal {...modal}>\n                            <CardWrapper backgroundColor=\"text\">\n                                <button onClick={modal.hide}>close</button>\n                            </CardWrapper>\n                        </Modal>\n                    </React.Fragment>\n                )}\n            </WithModal>\n        );\n    }\n\n    componentDidMount() {\n        setTimeout(() => {\n            this.modal1 && this.modal1.show();\n        }, 2000);\n    }\n}\nexport default Demo;\n\n\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}