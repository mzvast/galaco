{"version":3,"sources":["/Users/apple/@Projects/galaco/packages/galaco/src/docs/pages/api.mdx"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_apple_Projects_galaco_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","parentName","href","id","className","isMDXComponent"],"mappings":"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","file":"static/js/src-docs-pages-api.f3c3c74f.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`如何更好的定义 React 组件 API`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E8%83%8C%E6%99%AF\"\n        }}>{`背景`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#%E7%BB%84%E4%BB%B6-api-%E5%BB%BA%E8%AE%AE\"\n        }}>{`组件 API 建议`}</a><ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#%E5%B0%BD%E5%8F%AF%E8%83%BD%E6%9C%80%E5%B0%8F%E5%8C%96-api-%E6%9A%B4%E9%9C%B2%E6%95%B0%E9%87%8F\"\n            }}>{`尽可能最小化 API 暴露数量`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#%E6%98%93%E4%BA%8E%E6%A3%80%E7%B4%A2%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\"\n            }}>{`易于检索的目录结构`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#%E9%81%BF%E5%85%8D%E5%86%99-renderxxx-%E7%B1%BB%E4%BC%BC%E7%9A%84%E6%96%B9%E6%B3%95\"\n            }}>{`避免写 renderXXX 类似的方法`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#%E5%9C%A8%E6%95%B0%E6%8D%AE%E8%BE%B9%E7%95%8C%E6%8B%86%E5%88%86%E7%BB%84%E4%BB%B6\"\n            }}>{`在数据边界拆分组件`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#%E9%81%BF%E5%85%8D%E4%B8%BA%E4%BA%86%E9%87%8D%E7%94%A8%E7%BB%84%E4%BB%B6%E8%80%8C%E5%86%99%E7%AC%A8%E9%87%8D%E7%9A%84%E7%BB%84%E4%BB%B6-reusable--flexible\"\n            }}>{`避免为了重用组件而写笨重的组件 reusable ！== flexible`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#%E7%94%A8-composition\"\n            }}>{`用 composition`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#%E9%81%BF%E5%85%8D%E7%94%A8%E6%9E%9A%E4%B8%BE%E5%80%BC%E5%81%9A%E5%B8%83%E5%B0%94%E5%80%BC-props\"\n            }}>{`避免用枚举值做布尔值 props`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#%E4%BF%9D%E6%8C%81-props-api-%E5%B9%B3%E8%A1%8C\"\n            }}>{`保持 props API 平行`}</a></li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"#%E5%AF%BB%E6%B1%82%E5%9B%A2%E9%98%9F%E5%BB%BA%E8%AE%AE\"\n            }}>{`寻求团队建议`}</a></li>\n        </ul></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#refs\"\n        }}>{`Refs`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"背景\"\n    }}>{`背景`}</h2>\n    <p>{`经过一段时间的 React 项目开发，写了不少的组件，也踩过不少的坑。本文学习整理了一些觉得比较实用的组件 API 编写的建议。`}</p>\n    <h2 {...{\n      \"id\": \"组件-api-建议\"\n    }}>{`组件 API 建议`}</h2>\n    <h3 {...{\n      \"id\": \"尽可能最小化-api-暴露数量\"\n    }}>{`尽可能最小化 API 暴露数量`}</h3>\n    <p>{`这意味着更少的学习成本，让其他人更容易理解和使用。`}</p>\n    <h3 {...{\n      \"id\": \"易于检索的目录结构\"\n    }}>{`易于检索的目录结构`}</h3>\n    <p>{`不要过早的组织层次复杂的目录结构，在组件数量并不多的时候这么做是吃力不讨好。扁平的目录结构天生拥有字母顺序检索优势，便于其他人检索。`}</p>\n    <h3 {...{\n      \"id\": \"避免写-renderxxx-类似的方法\"\n    }}>{`避免写 renderXXX 类似的方法`}</h3>\n    <p>{`大部分的 render 开头的函数大概率可能应该自身是一个组件。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// Instead of this\nclass Items extends React.Component {\n  renderItems ({ items }) {\n    return items.map(item => (\n      <li key={item.id}>\n        {renderItem(item)}\n      </li>\n    ))\n  }\n\n  renderItem (item) {\n    return (\n      <div>\n        {item.name}\n      </div>\n    )\n  }\n\n  render () {\n    return (\n      <ul>\n        {renderItems(this.props)\n      </ul>\n    )\n  }\n}\n// Do this\nconst ItemList = ({ items }) =>\n  <ul>\n    {items.map(item => (\n      <li key={item.id}>\n        <Item {...item} />\n      </li>\n    )}\n  </ul>\n\nconst Item = ({ name }) =>\n  <div>{item.name}</div>\n\nclass Items extends React.Component {\n  render () {\n    const { items } = this.props\n    return <ItemList items={items} />\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"在数据边界拆分组件\"\n    }}>{`在数据边界拆分组件`}</h3>\n    <p>{`一些普通展示类组件的 API，通常应当由其数据模型来定义，而不是分开来传 props。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// Instead of this\n<Card\n  image={product.thumbnail}\n  title={product.name}\n  text={product.description}\n  link={product.permalink}\n/>\n\n// Do this\n<ProductCard {...product} />\n`}</code></pre>\n    <p>{`很可能 ProductCard 并不能复用，那么只留这么一份定义就可以了。你可以遵循“`}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)\"\n      }}>{`Rule of three`}</a>{`”，也就是假如同样的逻辑在代码中出现了 3 次，就重构这个东西吧。`}</p>\n    <h3 {...{\n      \"id\": \"避免为了重用组件而写笨重的组件-reusable-！-flexible\"\n    }}>{`避免为了重用组件而写笨重的组件 reusable ！== flexible`}</h3>\n    <p>{`别为了避免写一个新的组件，而给一个组件增加抽象属性和额外逻辑。例如，一个 Button 可能可以接受不同的 color，size，shape，但没必要每次都传一堆 props 组合进去，所谓`}<a parentName=\"p\" {...{\n        \"href\": \"https://speakerdeck.com/jenncreighton/the-how-and-why-of-flexible-react-components-289aa486-464a-4dea-b89a-6f92d0af6606\"\n      }}>{`Apropcalypse`}</a>{`。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// Instead of this\n<Button\n  variant='secondary'\n  size='large'\n  outline\n  label='Buy Now'\n  icon='shoppingBag'\n  onClick={handleClick}\n/>\n\n// Do this\n<SecondaryButton\n  size='large'\n  onClick={handleClick}>\n  <Icon name='shoppingBag' />\n  Buy Now\n</SecondaryButton>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"用-composition\"\n    }}>{`用 composition`}</h3>\n    <p>{`要尽量用 composition 的方式而不是 inherit 的方式，保证组件的灵活性。不要重复发明 props.children。如果定义的 props 接受的文字而不是基于数据结构，可能用 composition 是更好的方式。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// Instead of this\n<Header\n  title='Hello'\n  subhead='This is a header'\n  text='And it has arbitrary props'\n/>\n\n// Do this\n<Header>\n  <Heading>Hello</Heading>\n  <Subhead>This is a header</Subhead>\n  <Text>And it uses composition</Text>\n</Header>\n`}</code></pre>\n    <p>{`采用 composition 的方式，就不需要那么多的 documentation 了。你也可以将 composition 版本的组件绑定到某种数据模型，就像这样。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const PageHeader = ({\n  title,\n  description\n}) =>\n  <Header>\n    <Heading>{title}</Heading>\n    <Text>{description}</Text>\n  </Header>\n\n// And ideally can be used like this\n<PageHeader {...page} />\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"避免用枚举值做布尔值-props\"\n    }}>{`避免用枚举值做布尔值 props`}</h3>\n    <p>{`布尔值作为 props 有时候会令人困惑，例如`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`<Button primary />\n<Button secondary />\n`}</code></pre>\n    <p>{`那么这样会怎样?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`<Button primary secondary />\n`}</code></pre>\n    <p>{`这样一来不看文档就真看不懂了。因此可以尝试下面的方式`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`<Button variant=\"primary\" />\n`}</code></pre>\n    <p>{`虽然多打了几个字，但更具可读性。`}</p>\n    <h3 {...{\n      \"id\": \"保持-props-api-平行\"\n    }}>{`保持 props API 平行`}</h3>\n    <p>{`尽量保持不同组件间取同样名字的 props，这样更容易猜测用法和记住名称。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// Instead of this\n<DatePicker\n  date={date}\n  onSelect={handleDateChange}\n/>\n\n// Do this\n<DatePicker\n  value={date}\n  onChange={handleDateChange}\n/>\n\n`}</code></pre>\n    <p>{`Styled System 库鼓励多个组件采用平行的 props API。例如 color 在 rebass 库的所有组件中都有同样的效果。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`// example from Rebass\n<Box color='tomato' />\n<Heading color='tomato' />\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"寻求团队建议\"\n    }}>{`寻求团队建议`}</h3>\n    <p>{`以上的建议并不适用于所有需求，需要针对业务做灵活的变化。最好的建议是跟团队讨论，创建 RFCs 和 PRs，并尝试`}<a parentName=\"p\" {...{\n        \"href\": \"https://ponyfoo.com/articles/readme-driven-development\"\n      }}>{`Readme Driven Development`}</a>{`。写 React 组件很容易，但为团队创建一个好用的组件库值得花时间和努力去把事情做对。`}</p>\n    <h2 {...{\n      \"id\": \"refs\"\n    }}>{`Refs`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://jxnblk.com/blog/defining-component-apis-in-react/\"\n      }}>{`Defining Component APIs in React`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/thinking-in-react.html\"\n      }}>{`thinking-in-react`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)\"\n      }}>{`Rule of three`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://speakerdeck.com/jenncreighton/the-how-and-why-of-flexible-react-components-289aa486-464a-4dea-b89a-6f92d0af6606\"\n      }}>{`Apropcalypse(强烈推荐)`}</a></p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}